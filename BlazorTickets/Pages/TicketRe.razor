@using BlazorTickets.Services
@using Shared.Models
@using static BlazorTickets.Pages.TicketCenter
@inject IResponseService responseService
@inject ITicketsService ticketService

<div class="col-md-6 mb-4">
    <div class="card">
        <div class="card-body">
            <h3 class="card-title">@Ticket.Title</h3>
            <p class="card-text"><strong>User:</strong> @Ticket.SubmittedBy</p>
            <p class="card-text"><strong>Description:</strong> @Ticket.Description</p>
            <p class="card-text">
                <strong>Status:</strong>
                <span class="badge @(Ticket.IsResolved ? "bg-success" : "bg-danger")">
                    @(Ticket.IsResolved ? "Resolved" : "Not Resolved")
                </span>
            </p>
            <div class="mb-2">
                <h5>Tags:</h5>
                @foreach (var tag in Ticket.Tags)
                {
                    <span class="badge bg-primary me-1">@tag.Name</span>
                }
            </div>
        </div>
        <div class="card-footer">
            <ResponseRe Responses="@Ticket.Responses" />
            <hr />
            <div>
                <EditForm Model="NewResponse" OnSubmit="PostComment">
                    <InputText @bind-Value="NewResponse.Response" placeholder="Comment"></InputText>
                    <InputText @bind-Value="NewResponse.SubmittedBy" placeholder="Username"></InputText>
                    <button type="submit" class="btn btn-primary">Post comment</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TicketModel Ticket { get; set; } = new();
    public ResponseModel NewResponse { get; set; } = new ResponseModel();
    private async Task PostComment()
    {
        NewResponse.TicketId = Ticket.Id;

        if (NewResponse != null)
        {
            await responseService.PostResponse(NewResponse);

            if (Ticket.Responses == null)
            {
                Ticket.Responses = new List<ResponseModel>();
            }

            Ticket.Responses.Add(NewResponse);

            StateHasChanged();

            NewResponse = new();
        }
    }
}
