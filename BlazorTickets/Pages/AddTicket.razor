@page "/AddTicket"
@using BlazorTickets.Services
@using Shared.Models
@inject ITicketsService ticketsService
@inject ITagService tagsService
@inject NavigationManager navigationManager
<h3>Add a ticket</h3>
<p>It should be anything programming related.</p>
<hr />
<EditForm Model="NewTicket" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset>
        <legend>Ticket Details</legend>

        <div class="mb-3">
            <label for="SubmittedBy" class="form-label">Username:</label>
            <InputText id="SubmittedBy" class="form-control" @bind-Value="NewTicket.SubmittedBy" placeholder="Enter your username"></InputText>
            <ValidationMessage For="@(() => NewTicket.SubmittedBy)" />
        </div>

        <div class="mb-3">
            <label for="Title" class="form-label">Title:</label>
            <InputText id="Title" class="form-control" @bind-Value="NewTicket.Title" placeholder="Enter a title for your ticket"></InputText>
            <ValidationMessage For="@(() => NewTicket.Title)" />
        </div>

        <div class="mb-3">
            <label for="Description" class="form-label">Description:</label>
            <InputTextArea id="Description" class="form-control" @bind-Value="NewTicket.Description" placeholder="Describe the issue"></InputTextArea>
            <ValidationMessage For="@(() => NewTicket.Description)" />
        </div>
        <div class="mb-3">
            <label for="Tags" class="form-label">Tags:</label>
            @foreach (var tag in Tags)
            {
                <div>
                    <input type="checkbox" value="@tag.Id" @onchange="@(e => ToggleTagSelection(tag.Id, e.Value))" /> @tag.Name
                </div>
            }
        </div>

        <div class="d-grid">
            <button type="submit" class="btn btn-primary" disabled="@(!EditContext.Validate())">Post Ticket</button>
        </div>
    </fieldset>
</EditForm>

@code {
    public TicketModel NewTicket { get; set; } = new();
    public List<TagModel> Tags { get; set; } = new();
    public List<int> SelectedTagIds { get; set; } = new();

    private EditContext EditContext;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(NewTicket);
        Tags = await tagsService.GetAll();
    }

    private void ToggleTagSelection(int tagId, object isChecked)
    {
        bool isCheckedBool = (bool)isChecked;

        if (isCheckedBool)
        {
            if (!SelectedTagIds.Contains(tagId))
            {
                SelectedTagIds.Add(tagId);
            }
        }
        else
        {
            if (SelectedTagIds.Contains(tagId))
            {
                SelectedTagIds.Remove(tagId);
            }
        }

    }

    private async Task HandleSubmit()
    {
        NewTicket.IsResolved = false;
        NewTicket.Responses = new();
        NewTicket.Tags = NewTicket.Tags = Tags.Where(t => SelectedTagIds.Contains(t.Id)).ToList();

        await ticketsService.PostTicket(NewTicket);


        navigationManager.NavigateTo("/TicketCenter");
     
    }
}
